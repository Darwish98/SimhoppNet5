@using SimhoppNET5.Data
@using System
@page "/ParticipantsScoreAdd/{SCID:int}"
@inject IScoreServices ScoreService
@inject ICompetitionServices CompetitionService
@inject NavigationManager NavigationManager

<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.4.1/css/all.css" integrity="sha384-5sAR7xN1Nv6T6+dT2mhtzEpVJvfS3NScPQTrOxhwjIuvcA67KV2R5Jz6kr4abQsz" crossorigin="anonymous">
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700" rel="stylesheet">
</head>
<body>
    <div class="main-block custom">
        <EditForm Model="@scores" OnValidSubmit="@ScoreSave" Context="Editform">
            <div class="title">
                <i class="fas fa-pencil-alt"></i>
                <h2>Update Score</h2>
            </div>
             @if (status.Value_ == 3)
             {


                <div class="info">
                    <AuthorizeView Roles="Judge1, Admin" Context="Auth1">
                        <label>Difficulty: You set difficulty</label>
                        <input class="fname" type="number" @bind="scores.Dive1_Difficulty" name="name" min="0" max="10" step="0.5" required>
                        <label>Judge1_result</label>
                        <input class="fname" type="number" @bind="scores.Dive1_Judge1_result" name="name" min="0" max="10" step="0.5" required>
                    </AuthorizeView>
                    <AuthorizeView Roles="Judge2 , Admin">
                        <label>Difficulty is set by Judge 1</label>
                        <label>Judge2_result</label>
                        <input class="fname" type="number" @bind="scores.Dive1_Judge2_result" name="name" min="0" max="10" step="0.5" required>
                    </AuthorizeView>
                    <AuthorizeView Roles="Judge3, Admin">
                        <label>Difficulty is set by Judge 1</label>
                        <label>Judge3_result</label>
                        <input class="fname" type="number" @bind="scores.Dive1_Judge3_result" name="name" min="0" max="10"  step="0.5" required>
                    </AuthorizeView>

                </div>
             }

            @if (status.Value_ == 4)
            {

                <div class="info">
                    <AuthorizeView Roles="Judge1, Admin" Context="Auth2">
                        <label>Difficulty: You set difficulty</label>
                        <input class="fname" type="number" @bind="scores.Dive2_Difficulty" name="name" min="0" max="10"  step="0.5" required>
                        <label>Judge1_result</label>
                        <input class="fname" type="number" @bind="scores.Dive2_Judge1_result" name="name" min="0" max="10"  step="0.5" required>
                    </AuthorizeView>
                    <AuthorizeView Roles="Judge2 , Admin">
                        <label>Difficulty is set by Judge 1</label>
                        <label>Judge2_result</label>
                        <input class="fname" type="number" @bind="scores.Dive2_Judge2_result" name="name" min="0" max="10" step="0.5" required>
                    </AuthorizeView>
                    <AuthorizeView Roles="Judge3, Admin">
                        <label>Difficulty is set by Judge 1</label>
                        <label>Judge3_result</label>
                        <input class="fname" type="number" @bind="scores.Dive2_Judge3_result" name="name" min="0" max="10" step="0.5"  required>
                    </AuthorizeView>

                </div>
            }
            @if (status.Value_ == 5)
            {

                <div class="info">
                    <AuthorizeView Roles="Judge1, Admin" Context="Auth3">
                        <label>Difficulty: You set difficulty</label>
                        <input class="fname" type="number" @bind="scores.Dive3_Difficulty" name="name" min="0" max="10"  step="0.5" required>
                        <label>Judge1_result</label>
                        <input class="fname" type="number" @bind="scores.Dive3_Judge1_result" name="name" min="0" max="10" step="0.5" required>
                    </AuthorizeView>
                    <AuthorizeView Roles="Judge2 , Admin">
                        <label>Difficulty is set by Judge 1</label>
                        <label>Judge2_result</label>
                        <input class="fname" type="number" @bind="scores.Dive3_Judge2_result" name="name" min="0" max="10" step="0.5"  required>
                    </AuthorizeView>
                    <AuthorizeView Roles="Judge3, Admin">
                        <label>Difficulty is set by Judge 1</label>
                        <label>Judge3_result</label>
                        <input class="fname" type="number" @bind="scores.Dive3_Judge3_result" name="name" min="0" max="10" step="0.5" required>
                    </AuthorizeView>

                </div>
            }
            <button type="submit">Update</button>
            <button @onclick="@Cancel">Cancel</button>
        </EditForm>
        <div class="left-part">
            <i class="fas fa-graduation-cap"></i>
            <h1>Diving News</h1>
            <p>Click on the button latest diving sport news </p>
            <div class="btn-group">
                <a class="btn-item" href="https://olympics.com/en/sports/diving/">Olympics</a>
                <a class="btn-item" href="https://www.svensksimidrott.se/varasimidrotter/Simhopp/Nyheter">Simhopp</a>
            </div>
        </div>
    </div>
</body>
</html>


@code {


    Scores scores = new Scores();

    [Parameter]
    public int SCID { get; set; }

    CompetitionStatus status = new CompetitionStatus();

    protected override async Task OnInitializedAsync()
    {
        scores = await ScoreService.Score_GetOne(SCID);
        status = await CompetitionService.GetStatus();

    }

    protected async Task ScoreSave()
    {
        if (scores.SCID == 0)
        {
            float[] score_list = { scores.Dive1_Judge1_result, scores.Dive1_Judge2_result, scores.Dive1_Judge3_result };
            Array.Sort(score_list);
            scores.Dive1_Total_results = score_list[1] * 3 * scores.Dive1_Difficulty;

            float[] score_list2 = { scores.Dive2_Judge1_result, scores.Dive2_Judge2_result, scores.Dive2_Judge3_result };
            Array.Sort(score_list);
            scores.Dive2_Total_results = score_list[1] * 3 * scores.Dive2_Difficulty;

            float[] score_list3 = { scores.Dive3_Judge1_result, scores.Dive3_Judge2_result, scores.Dive3_Judge3_result };
            Array.Sort(score_list);
            scores.Dive3_Total_results = score_list[1] * 3 * scores.Dive3_Difficulty;

            scores.Final_Total = scores.Dive1_Total_results + scores.Dive2_Total_results + scores.Dive3_Total_results;


            await ScoreService.ScoreUpdate(scores);
        }
        else
        {

            float[] score_list = { scores.Dive1_Judge1_result, scores.Dive1_Judge2_result, scores.Dive1_Judge3_result };
            Array.Sort(score_list);
            scores.Dive1_Total_results = score_list[1] * 3 * scores.Dive1_Difficulty;

            float[] score_list2 = { scores.Dive2_Judge1_result, scores.Dive2_Judge2_result, scores.Dive2_Judge3_result };
            Array.Sort(score_list);
            scores.Dive2_Total_results = score_list[1] * 3 * scores.Dive2_Difficulty;

            float[] score_list3 = { scores.Dive3_Judge1_result, scores.Dive3_Judge2_result, scores.Dive3_Judge3_result };
            Array.Sort(score_list);
            scores.Dive3_Total_results = score_list[1] * 3 * scores.Dive3_Difficulty;

            scores.Final_Total = scores.Dive1_Total_results + scores.Dive2_Total_results + scores.Dive3_Total_results;


            await ScoreService.ScoreUpdate(scores);

        }
        NavigationManager.NavigateTo("/ParticipantsScore");
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("/ParticipantsScore");
    }
}




@*
    @code {

        Scores score = new Scores();

        [Parameter]
        public int SCID { get; set; }
        //set default page title and button text

        protected override async Task OnInitializedAsync()
        {

            score = await ScoreService.Score_GetOne(SCID);
         

        }

        protected async Task ScoreSave()
        {
            score.Dive1_Total_results = 3;
            await ScoreService.ScoreUpdate(score);
            NavigationManager.NavigateTo("/ParticipantsScore");
        }
        void Cancel()
        {
            NavigationManager.NavigateTo("/ParticipantsScore");
        }
    }*@
