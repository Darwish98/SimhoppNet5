@using SimhoppNET5.Data
@using System

@page "/ParticipantsScoreAdd/{Score_ID:int}"
@inject IScoreServices ScoreService
@inject NavigationManager NavigationManager

<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.4.1/css/all.css" integrity="sha384-5sAR7xN1Nv6T6+dT2mhtzEpVJvfS3NScPQTrOxhwjIuvcA67KV2R5Jz6kr4abQsz" crossorigin="anonymous">
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700" rel="stylesheet">
</head>
<body>
    <div class="main-block">
        <EditForm Model="@score" OnValidSubmit="@ScoreSave" Context="Editform">
            <div class="title">
                <i class="fas fa-pencil-alt"></i>
                <h2>Update Score</h2>
            </div>
            <div class="info">
                <AuthorizeView Roles="Judge1, Admin" Context="Auth1">
                    <input class="fname" type="text" @bind="score.Difficulty" name="name" placeholder="Difficulty" required>
                    <input class="fname" type="text" @bind="score.Judge1_result" name="name" placeholder="Judge1_result" required>
                </AuthorizeView>
                <AuthorizeView Roles="Judge2 , Admin">
                    <input class="fname" type="text" @bind="score.Judge2_result" name="name" placeholder="Judge2_result" required>
                </AuthorizeView>
                <AuthorizeView Roles="Judge3, Admin">
                    <input class="fname" type="text" @bind="score.Judge3_result" name="name" placeholder="Judge3_result" required>
                </AuthorizeView>

            </div>
            <button type="submit">Update</button>
            <button @onclick="@Cancel">Cancel</button>
        </EditForm>
        <div class="left-part">
            <i class="fas fa-graduation-cap"></i>
            <h1>Diving News</h1>
            <p>Click on the button latest diving sport news </p>
            <div class="btn-group">
                <a class="btn-item" href="https://olympics.com/en/sports/diving/">Olympics</a>
                <a class="btn-item" href="https://www.svensksimidrott.se/varasimidrotter/Simhopp/Nyheter">Simhopp</a>
            </div>
        </div>
    </div>
</body>
</html>


@*
<EditForm Model="@score" OnValidSubmit="@ScoreSave" Context="Editform">
    <table class="editform">
        <AuthorizeView Roles="Judge1, Admin" Context="Auth1">
            <tr>
                <td>Difficulty</td>
                <td><input type="text" @bind="score.Difficulty" required /></td>
            </tr>
            <tr>
                <td>Judge1</td>
                <td><input type="text" placeholder="Value between 0-10" @bind="score.Judge1_result" required /></td>
            </tr>

        </AuthorizeView>
        <AuthorizeView Roles="Judge2 , Admin">
            <tr>
                <td>Judge2:</td>
                <td><input type="text" placeholder="Value between 0-10" @bind="score.Judge2_result" required /></td>
            </tr>
        </AuthorizeView>
        <AuthorizeView Roles="Judge3, Admin">
            <tr>
                <td>Judge3</td>
                <td><input type="text" placeholder="Value between 0-10" @bind="score.Judge3_result" required /></td>
            </tr>
        </AuthorizeView>


        <tr>
            <td colspan="2" style="text-align:center">
                <input type="submit" value="score" @onclick="@ScoreSave" />
                <input type="button" value="Cancel" @onclick="@Cancel2" />
            </td>

        </tr>
    </table>


</EditForm>*@




@code {

    Scores score = new Scores();

    [Parameter]
    public int Score_ID { get; set; }
    //set default page title and button text

    protected override async Task OnInitializedAsync()
    {

        score = await ScoreService.Score_GetOne(Score_ID);

    }

    protected async Task ScoreSave()
    {
        if (score.Score_ID == 0)
        {
            float[] score_list = { score.Judge1_result, score.Judge2_result, score.Judge3_result };
            Array.Sort(score_list);
            score.Total_results = score_list[1] * 3 * score.Difficulty;
            await ScoreService.ScoreUpdate(score);
        }
        else
        {

            float[] score_list = { score.Judge1_result, score.Judge2_result, score.Judge3_result };
            Array.Sort(score_list);
            score.Total_results = score_list[1] * 3 * score.Difficulty;
            await ScoreService.ScoreUpdate(score);

        }
        NavigationManager.NavigateTo("/ParticipantsScore");
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("/ParticipantsScore");
    }
}